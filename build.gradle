group 'kamontat.me'

apply plugin: 'java'
apply plugin: 'idea'

// run main
apply plugin: 'application'
mainClassName = "com.kamontat.main.Main"

sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '2.2.3'

description = 'Github Request By Java'

task info {
    description "get project information"

    doFirst {
        println "----------------"
        println "Name: $project.name ($version)"
        println "Description: $project.description"

        println "Project-location: \"$projectDir\""
        println "Project-location: \"$projectDir/docs\""
        println "----------------"
        println "Build-location: \"$buildDir\""
        println "Reports-location: \"$reportsDir\""
        println "Distributions-location: \"$buildDir/distributions\""
        println "----------------"
    }

    doLast {
        println ""
        println ""
        println ""
    }
}

task wrapper(type: Wrapper) {
    description "create wrapper gradle version 3.3"
    gradleVersion = '3.3'
}

// execute main class by run `gradlew execute -P mainClass=<Name>` or `gradlew execute -P mainClass=<Name> -P arguments=<arguments>`
task execute(type: JavaExec) {
    if (project.hasProperty('arguments')) {
        args(getProperty('arguments').split(','))
    }

    if (project.hasProperty('mainClass')) {
        main = getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }
}

task gendocs(type: Javadoc) {
    description "create docs folder in root folder($rootDir) and contain all javadoc"
//    source = sourceSets.main.allJava

    classpath = sourceSets.main.compileClasspath

    destinationDir = file("$rootDir/docs")
    title = "Github-Request $version"
//    options.windowTitle = "Github-Request $version"
//    options.quiet()
}

// add version class in com.kamontat.model.management call `Version.java`
task genconfigclass {
    description "add version class in com.kamontat call `Configuration.java`"
    doFirst {
        new File("src/main/java/com/kamontat", "Configuration.java").write(
                "package com.kamontat;\n" +
                        "\n" +
                        "public class Configuration {\n" +
                        "\tpublic static final String PROJECT_NAME = \"Github-Request\";\n" +
                        "\tpublic static final String PROJECT_OWNER = \"kamontat\";\n" +
                        "\tpublic static final String PROJECT_VERSION = \"2.2.3\";\n" +
                        "}"
        )
    }
}

task jarmaker(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Github Request',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }

    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// ordering task
compileJava.dependsOn clean

build.dependsOn gendocs
build.dependsOn genconfigclass
jar.finalizedBy jarmaker

build.finalizedBy info

repositories {
    maven { url "https://repo.jenkins-ci.org/releases/" }
    mavenCentral()
}

dependencies {
    // unit test4
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // unit test5
    //    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M3'
    //    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M3'

    // jetbrains gui
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    // github api
    compile group: 'org.kohsuke', name: 'github-api', version: '1.84'
    // ok connection
    compile group: 'com.squareup.okhttp', name: 'okhttp-urlconnection', version: '2.7.5'
    // encryption
    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.2'
    // google drive api
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.22.0'
    compile 'com.google.apis:google-api-services-drive:v3-rev56-1.22.0'
}